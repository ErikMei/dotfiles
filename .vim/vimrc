set nocompatible
set number
set relativenumber
set autoindent
set smartindent
set wrap
let mapleader = " "

set expandtab
set shiftround
set tabstop=4
set softtabstop=4
set shiftwidth=4
set mouse=a

" Search
set incsearch
set ignorecase
set smartcase
set hlsearch
nnoremap <leader>h :set<Space>nohlsearch!<CR>
set showmatch

nnoremap <expr> ; getcharsearch().forward ? ';' : ','
nnoremap <expr> , getcharsearch().forward ? ',' : ';'

" To match C and D
nnoremap Y y$

" copy to OS clipboard.
nmap <leader>y "+y
nmap <leader>Y "+Y
vmap <leader>y "+y
nmap <leader>yy "+yy


" paste from OS clipboard
nmap <leader>p "+p
nmap <leader>P "+P
vmap <leader>p "+p
vmap <leader>P "+P"`"`"

set foldenable
set matchtime=3
set foldlevelstart=10
set t_Co=256
set background=dark

set wildmenu
set wildmode=longest:full,full
set wildcharm=<C-z>
set wildignore+=*/node_modules/*
set wildignore+=*/.git/*
set wildignorecase


" Plugins
if filereadable(expand("~/.vim/.vimrc.plug"))
	source ~/.vim/.vimrc.plug
endif

filetype plugin on
runtime macros/matchit.vim

syntax on
colorscheme dracula

" Buffers
set hidden
nnoremap <PageUp> :bprevious<CR>
nnoremap <PageDown> :bnext<CR>

" Windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Brackets/Parens
inoremap {<CR> {<CR>}<Esc>O
inoremap (<CR> (<CR>)<Esc>O
inoremap [<CR> [<CR>]<Esc>O

" FZF
nnoremap <leader>f :Files<CR>
nnoremap <leader>b :Buffers<CR>

" Prettier
autocmd BufWritePre *.js Prettier

" lightline
set laststatus=2

function! IsWSL()
    let uname = substitute(system('uname'),'\n','','')
    if uname == 'Linux'
        let lines = readfile("/proc/version")
        if lines[0] =~ "Microsoft"
            return 1
        endif
    endif
endfunction

" WSL2 yank support
if IsWSL()
    set clipboard=unnamedplus
    let s:clip = '/mnt/c/Windows/System32/clip.exe'  " change this path according to your mount point
    if executable(s:clip)
        augroup WSLYank
            autocmd!
            autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
        augroup END
    endif
endif
